<div class="pagination">
    <button @onclick="PreviousPage" disabled="@IsPreviousDisabled">Previous</button>
    @for (int i = 1; i <= TotalPages; i++)
    {
        int c = i;
        <button @onclick="() => SetPage(c)" class="@(c == CurrentPage ? "active" : "")">@c</button>
    }
    <button @onclick="NextPage" disabled="@IsNextDisabled">Next</button>
</div>

@code {
    [Parameter] public int TotalItems { get; set; }
    [Parameter] public int ItemsPerPage { get; set; }
    [Parameter] public int CurrentPage { get; set; }
    [Parameter] public EventCallback<int> OnPageChanged { get; set; }

    private int TotalPages => (int)Math.Ceiling((double)TotalItems / ItemsPerPage);
    private bool IsPreviousDisabled => CurrentPage <= 1;
    private bool IsNextDisabled => CurrentPage >= TotalPages;

    private async Task SetPage(int page)
    {
        if (page != CurrentPage)
        {
            CurrentPage = page;
            await OnPageChanged.InvokeAsync(CurrentPage);
        }
    }

    private async Task PreviousPage()
    {
        if (CurrentPage > 1)
        {
            CurrentPage--;
            await OnPageChanged.InvokeAsync(CurrentPage);
        }
    }

    private async Task NextPage()
    {
        if (CurrentPage < TotalPages)
        {
            CurrentPage++;
            await OnPageChanged.InvokeAsync(CurrentPage);
        }
    }
}
